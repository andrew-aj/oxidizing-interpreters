use crate::bytecode_compiler::Upvalue;

#[derive(Eq, PartialEq, Debug, Clone)]
pub enum OpCode {
    Constant { index: usize },
    Nil,
    True,
    False,
    Pop,
    GetLocal { index: usize },
    SetLocal { index: usize },
    GetGlobal { index: usize },
    DefineGlobal { index: usize },
    SetGlobal { index: usize },
    GetUpvalue { index: usize },
    SetUpvalue { index: usize },
    GetProperty { index: usize },
    SetProperty { index: usize },
    GetSuper { index: usize },
    Equal,
    Greater,
    Less,
    Add,
    Subtract,
    Multiply,
    Divide,
    Not,
    Negate,
    Print,
    Jump { offset: usize },
    JumpIfFalse { offset: usize },
    Loop { offset: usize },
    Call { arity: usize },
    Invoke { function_name: usize, arity: usize },
    SuperInvoke { function_name: usize, arity: usize },
    Closure(usize /*function name*/, Vec<Upvalue>),
    CloseUpvalue,
    Return,
    Class { name: usize },
    Inherit,
    Method { name: usize },
}
